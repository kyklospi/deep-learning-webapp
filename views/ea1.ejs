<!DOCTYPE html>
<html>
  <head>
    <title>Image Classification - Einsendeaufgabe 1</title>
    <!-- importing p5 library into the project -->       
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.6.1/p5.js"></script>
    <!-- importing ML5 library into the project -->
    <script src="https://unpkg.com/ml5@latest/dist/ml5.min.js"></script>
    <!-- importing p5 addons library into the project -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.6.1/addons/p5.dom.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
    <link rel="stylesheet" href="/css/ea1.css" />
  </head>
  <body>
    <h1>Image Classification</h1>
    <h2>Einsendeaufgabe 1</h2>
    <p>Atika Rachmawati</p>
    
    <h3>Example Images of Mount Fuji in Japan</h3>
    <!-- Image Display and Chart Section -->
    <div id="imageWrapper"></div>
    
    <!-- Bottom section (Drag and Drop and Buttons) -->
    <h3>üñº Your Image Classification</h3>
    <!-- Uploaded Image Display and Chart Section -->
    <br /><br />
    <div id="uploadedImageWrapper"></div>

    <h3>Upload an image, and we'll classify it for you!</h3>

    <div class="bottom-section">
      <div class="drop-zone" id="dropZone">
        Drag & drop images here or use the file input below.
      </div>
    
      <label for="imageUpload" id="uploadLabel">Upload Image</label>
      <input type="file" id="imageUpload" accept="image/*" multiple style="display: none;" />
    
      <button id="clearBtn">Clear Image</button>
      <br /><br />
    </div>

    <div class="discussion-section">
      <br /><br />
      <br /><br />
      <h2>Discussion</h2>
      <p>Die Klassifikationsergebnisse mit dem ml5.js MobileNet-Modell zeigen einen deutlichen Unterschied zwischen korrekt und falsch erkannten Bildern des Mount Fuji. Die drei korrekten Klassifikationen - ‚Äûmount-fuji-without-snow.jpeg‚Äú (97%), ‚Äûmount-fuji-temple-sakura.jpeg‚Äú (38,5%) und ‚Äûmount-fuji-mural.jpeg‚Äú (17,7%) - wurden alle als ‚Äûvolcano‚Äú erkannt, was der tats√§chlichen Kategorie von Mount Fuji entspricht. 
        Nur eines der Bilder erzielte jedoch eine hohe Konfidenz, was darauf hinweist, dass klare, unverf√§lschte Aufnahmen (wie das Bild ohne Schnee) die Erkennung erleichtern. Die niedrigeren Werte bei der Wandmalerei und dem Tempelmotiv lassen sich durch visuelle Ablenkungen oder eine k√ºnstlerische Darstellung erkl√§ren.
      </p>
      <p>Die Fehlklassifikationen - ‚Äûmonitor‚Äú (17,9%), ‚Äûmosquito net‚Äú (20,3%) und ‚Äûalp‚Äú (45,4%) - zeigen, dass das Modell mit unscharfen oder weit entfernten Bildern Schwierigkeiten hat. Besonders bei den verschwommenen und weit entfernten Aufnahmen gehen wichtige Merkmale des Berges verloren oder sind nicht eindeutig genug. 
        Die Klassifizierung als ‚ÄûAlp‚Äú deutet darauf hin, dass das Modell entfernte Berglandschaften mit den Alpen verwechselt, m√∂glicherweise wegen √§hnlicher Formen oder Farben. Insgesamt zeigt sich, dass Kontext, Bildsch√§rfe und Bildausschnitt eine gro√üe Rolle bei der korrekten Erkennung spielen. 
        Das verdeutlicht die Grenzen vortrainierter Modelle, wenn Objekte verdeckt, abstrahiert oder ungew√∂hnlich dargestellt werden.
      </p>
    </div>
    <div>
      <br /><br />
      <h2>Documentation</h2>
      <p><strong>Technischer Aufbau:</strong> Die Anwendung ist als Webprojekt umgesetzt und besteht aus einer Express.js-basierten Node.js-Anwendung im Backend. Das Frontend ist HTML/CSS-basiert und nutzt moderne JavaScript-Bibliotheken (siehe Verwendete Frameworks und Bibliotheken).
        Die Klassifikation erfolgt vollst√§ndig im Browser, ohne dass ein Server-Backend ben√∂tigt wird.
      </p>
      <p><strong>Logik der Implementierung:</strong> Beim Laden der Seite werden sechs Beispielbilder automatisch klassifiziert. Die Ergebnisse werden in zwei Gruppen dargestellt: <strong>korrekt klassifizierte</strong> und <strong>falsch klassifizierte</strong> Bilder.
        Jedes Bild zeigt Dateinamen, das top-pr√§dizierte Label, die Konfidenz, und ein Balkendiagramm mit allen Konfidenz-Werten (Top-Kategorien).
        Nutzer*innen k√∂nnen eigene Bilder hochladen oder per Drag & Drop hinzuf√ºgen, um eine Live-Klassifikation zu erhalten.
      </p>
      <p><strong>Beobachtungen & Resultate:</strong> Die drei korrekt klassifizierten Bilder wurden mit dem Label <strong>‚Äûvolcano‚Äú</strong> erkannt, was der Realit√§t entspricht, da Mount Fuji ein Vulkan ist. Bilder mit klarem Fokus und ohne visuelle Ablenkung erzielten h√∂here Konfidenzwerte (bis zu 97%).
        Falsch klassifizierte Bilder wie ‚Äûmonitor‚Äú oder ‚Äûmosquito net‚Äú entstanden bei unscharfen oder weit entfernten Motiven - hier hat das Modell wesentliche Merkmale nicht erkannt oder fehlinterpretiert.
      </p>
      <p><strong>Wichtige Erkenntnisse:</strong> Vortrainierte Modelle wie MobileNet sind nicht perfekt, besonders bei Bildern mit ungew√∂hnlicher Perspektive, Unsch√§rfe oder visuellen St√∂rungen.
        Die Konfidenzwerte geben einen guten Hinweis darauf, wie sicher das Modell bei seiner Klassifikation ist.
        Eine klare, strukturierte Bilddarstellung verbessert die Klassifikationsergebnisse sp√ºrbar.
      </p>
      <br /><br />   
      <h3>Technische Besonderheiten der L√∂sung</h3>
      <ul>
        <li>
          <strong>Clientseitiges Machine Learning</strong><br>
          Die gesamte Klassifikation erfolgt im Browser, um Bilder ohne Serververbindung zu klassifizieren - es ist kein Backend notwendig.
        </li>
        <li>
          <strong>Visuelle R√ºckmeldung durch Diagramme</strong><br>
          Die Konfidenzwerte der Klassifikation werden als Balkendiagramme mit Prozentangabe dargestellt.
        </li>
        <li>
          <strong>Gruppierung der Bilder</strong><br>
          Beispielbilder sind in korrekt und falsch klassifizierte Gruppen aufgeteilt, um Unterschiede anschaulich zu machen.
        </li>
        <li>
          <strong>Drag & Drop sowie Datei-Upload:</strong><br>
          Nutzer*innen k√∂nnen eigene Bilder hochladen oder direkt in das Drop-Feld ziehen - beides wird unterst√ºtzt.
        </li>
        <li>
          <strong>Dynamisches DOM & Modularer Aufbau:</strong><br>
          F√ºr jedes Bild werden dynamisch Bildcontainer, Klassifikationsergebnisse und Diagramme erzeugt.
        </li>
        <li>
          <strong>Fehlertoleranz:</strong><br>
          Fehler beim Klassifizieren (z.B. ung√ºltige Bilder) werden abgefangen und per console.error() auch im Entwickler-Log sichtbar gemacht.
        </li>
      </ul>
      <h3>Verwendete Frameworks und Bibliotheken</h3>
      <ul>
        <li>
          <strong>Express.js</strong><br>
          Ein minimalistisches Webframework f√ºr Node.js zur Erstellung von Serveranwendungen. Hier wird es verwendet, um statische Dateien bereitzustellen (Bilder, CSS, JavaScript) und die HTML-Seite auszuliefern.
        </li>
        <li>
          <strong>ml5.js</strong><br>
          Ein einfaches Interface f√ºr maschinelles Lernen im Browser, basierend auf TensorFlow.js. Es wird verwendet, um das vortrainierte <em>MobileNet</em>-Modell zu laden und Bilder clientseitig zu klassifizieren.
        </li>
        <li>
          <strong>p5.js</strong> (inkl. <code>p5.dom</code>)<br>
          Dient zur DOM-Manipulation und als kreative JavaScript-Bibliothek. Wird hier haupts√§chlich zur Kompatibilit√§t mit ml5.js eingebunden.
        </li>
        <li>
          <strong>Chart.js</strong><br>
          Eine beliebte JavaScript-Bibliothek zur Visualisierung von Daten. Hier verwendet, um die Klassifikationsergebnisse grafisch (als Balkendiagramm) darzustellen.
        </li>
        <li>
          <strong>chartjs-plugin-datalabels</strong><br>
          Ein Plugin f√ºr Chart.js, das die Anzeige von Prozentwerten direkt auf Balken im Diagramm erm√∂glicht.
        </li>
      </ul> 
      <h3>Quellen und Referenzen</h3>
      <ul>
        <li><a href="https://ml5js.org/" target="_blank">ml5.js Dokumentation</a></li>
        <li><a href="https://www.chartjs.org/" target="_blank">Chart.js Dokumentation</a></li>
        <li><a href="https://p5js.org/" target="_blank">p5.js Dokumentation</a></li>
        <li><a href="https://chartjs-plugin-datalabels.netlify.app/" target="_blank">Chartjs Plugin Datalabels</a></li>
        <li><a href="https://expressjs.com/" target="_blank">Express.js Dokumentation</a></li>
      </ul>
    </div>

    <!-- importing ea1.js into the project -->
    <script src="/javascripts/ea1.js" type="text/javascript"></script>
  </body>
</html>
