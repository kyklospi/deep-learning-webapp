<!DOCTYPE html>
<html>
  <head>
    <title>Image Classification - Einsendeaufgabe 1</title>
    <!-- importing p5 library into the project -->       
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.6.1/p5.js"></script>
    <!-- importing ML5 library into the project -->
    <script src="https://unpkg.com/ml5@latest/dist/ml5.min.js"></script>
    <!-- importing p5 addons library into the project -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.6.1/addons/p5.dom.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
    <link rel="stylesheet" href="/css/ea1.css" />
  </head>
  <body>
    <h1>Image Classification</h1>
    <h2>Einsendeaufgabe 1</h2>
    <p>Atika Rachmawati</p>
    
    <h3>Example Images of Mount Fuji in Japan</h3>
    <!-- Image Display and Chart Section -->
    <div id="imageWrapper"></div>
    
    <!-- Bottom section (Drag and Drop and Buttons) -->
    <h3>ðŸ–¼ Your Image Classification</h3>
    <!-- Uploaded Image Display and Chart Section -->
    <br /><br />
    <div id="uploadedImageWrapper"></div>

    <h3>Upload an image, and we'll classify it for you!</h3>

    <div class="bottom-section">
      <div class="drop-zone" id="dropZone">
        Drag & drop images here or use the file input below.
      </div>
    
      <label for="imageUpload" id="uploadLabel">Upload Image</label>
      <input type="file" id="imageUpload" accept="image/*" multiple style="display: none;" />
    
      <button id="clearBtn">Clear Image</button>
      <br /><br />
    </div>

    <div class="discussion-section">
      <br /><br />
      <br /><br />
      <h2>Discussion</h2>
      <p>The classification results using the ml5.js MobileNet model show a clear distinction between correctly and incorrectly recognized images of Mount Fuji. The three correct classifications - 'mount-fuji-without-snow.jpeg' (97%), 'mount-fuji-temple-sakura.jpeg' (38.5%), and 'mount-fuji-mural.jpeg' (17.7%) - were all identified as 'volcano,' which corresponds to the actual category of Mount Fuji. 
        However, only one of the images achieved a high confidence score, indicating that clear, unaltered shots (such as the image without snow) make recognition easier. The lower scores for the mural and the temple motif at the foreground can be explained by an artistic representation or visual distractions.
      </p>
      <p>The misclassifications - 'monitor' (17.9%), 'mosquito net' (20.3%), and 'alp' (45.4%) - show that the model struggles with blurry or distant images. Especially in the blurry and faraway shots, important features of the mountain are lost or not distinct enough. 
        The classification as 'Alp' suggests that the model confuses distant mountain landscapes with the Alps, possibly due to similar shapes or colors. Overall, it becomes evident that context, image sharpness, and framing play a significant role in accurate recognition. 
        This highlights the limitations of pre-trained models when objects are obscured, abstracted, or depicted in unusual ways.
      </p>
    </div>
    <div>
      <br /><br />
      <h2>Documentation</h2>
      <p><strong>Technical Structure:</strong> The application is implemented as a web project and consists of a Node.js backend based on Express.js. The frontend is built with HTML/CSS and uses modern JavaScript libraries (see Frameworks and Libraries).
        The classification takes place entirely in the browser, without requiring a server backend.
      </p>
      <p><strong>Implementation Logic:</strong> When the page loads, six sample images are automatically classified. The results are displayed in two groups: <strong>correctly classified</strong> and <strong>incorrectly classified</strong> images.
        Each image displays the filename, the top-predicted label, the confidence score, and a bar chart showing all confidence values (top categories).
        Users can upload their own images or add them via drag and drop to receive a live classification.
      </p>
      <p><strong>Observations & Results:</strong> The three correctly classified images were identified with the label <strong>'volcano'</strong>, which is accurate since Mount Fuji is a volcano. Images with a clear focus and no visual distractions achieved higher confidence scores (up to 97%).
        Incorrect classifications such as 'monitor' or 'mosquito net' occurred with blurry or distant subjects - in these cases, the model failed to recognize or misinterpreted key features.
      </p>
      <p><strong>Key Insights:</strong> Pre-trained models like MobileNet are not perfect, especially when dealing with images that have unusual perspectives, blurriness, or visual disturbances.
        Confidence scores provide a good indication of how certain the model is in its classification.
        A clear, well-structured image presentation noticeably improves classification results.
      </p>
      <br /><br />   
      <h3>Technical Highlights of the Solution</h3>
      <ul>
        <li>
          <strong>Client-Side Machine Learning</strong><br>
          All classification is performed in the browser to allow image classification without a server connection â€“ no backend is required.
        </li>
        <li>
          <strong>Visual Feedback Through Charts</strong><br>
          The confidence scores from the classification are displayed as bar charts with percentage values.
        </li>
        <li>
          <strong>Image Grouping</strong><br>
          Sample images are divided into correctly and incorrectly classified groups to clearly illustrate the differences.
        </li>
        <li>
          <strong>Drag & Drop and File Upload</strong><br>
          Users can upload their own images or drag them directly into the drop area - both options are supported.
        </li>
        <li>
          <strong>Dynamic DOM & Modular Structure</strong><br>
          For each image, image containers, classification results, and charts are generated dynamically.
        </li>
        <li>
          <strong>Error Tolerance</strong><br>
          Errors during classification (e.g., invalid images) are caught and logged in the developer console using console.error().
        </li>
      </ul>
      <h3>Used Frameworks and Libraries</h3>
      <ul>
        <li>
          <strong>Express.js</strong><br>
          A minimalist web framework for Node.js used to create server applications. In this case, it is used to serve static files (images, CSS, JavaScript) and deliver the HTML page.
        </li>
        <li>
          <strong>ml5.js</strong><br>
          A simple interface for machine learning in the browser, based on TensorFlow.js. It is used to load the pre-trained <em>MobileNet</em> model and classify images on the client-side.
        </li>
        <li>
          <strong>p5.js</strong> (inkl. <code>p5.dom</code>)<br>
          Used for DOM manipulation and as a creative JavaScript library. Here, it is mainly integrated for compatibility with ml5.js.
        </li>
        <li>
          <strong>Chart.js</strong><br>
          A popular JavaScript library for data visualization. Here, it is used to graphically display the classification results (as a bar chart).
        </li>
        <li>
          <strong>chartjs-plugin-datalabels</strong><br>
          A plugin for Chart.js that enables the display of percentage values directly on the bars in the chart.
        </li>
      </ul> 
      <h3>Sources and References</h3>
      <ul>
        <li><a href="https://ml5js.org/" target="_blank">ml5.js Documentation</a></li>
        <li><a href="https://www.chartjs.org/" target="_blank">Chart.js Documentation</a></li>
        <li><a href="https://p5js.org/" target="_blank">p5.js Documentation</a></li>
        <li><a href="https://chartjs-plugin-datalabels.netlify.app/" target="_blank">Chartjs Plugin Datalabels</a></li>
        <li><a href="https://expressjs.com/" target="_blank">Express.js Documentation</a></li>
      </ul>
    </div>

    <!-- importing ea1.js into the project -->
    <script src="/javascripts/ea1.js" type="text/javascript"></script>
  </body>
</html>
